#user nginx;
user root;

# Set number of worker processes automatically based on number of CPU cores.
worker_processes auto;

pid        /var/run/nginx.pid;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;

# Configures default error logger.
error_log /var/log/nginx/error.log warn;

# Includes files with directives to load dynamic modules.
include /etc/nginx/modules/*.conf;


events {
    # The maximum number of simultaneous connections that can be opened by
    # a worker process.
    worker_connections 1024;
}

http {
    # Includes mapping of file name extensions to MIME types of responses
    # and defines the default type.
    include /etc/nginx/mime.types;
    default_type application/octet-stream;

    # Name servers used to resolve names of upstream servers into addresses.
    # It's also needed when using tcpsocket and udpsocket in Lua modules.
    resolver 9.9.9.9 1.1.1.1 8.8.8.8 116.116.116.116;

    # Don't tell nginx version to clients.
    server_tokens off;

    # Specifies the maximum accepted body size of a client request, as
    # indicated by the request header Content-Length. If the stated content
    # length is greater than this size, then the client receives the HTTP
    # error code 413. Set to 0 to disable.
    client_max_body_size 1m;

    # Timeout for keep-alive connections. Server will close connections after
    # this time.
    keepalive_timeout 75;

    # Sendfile copies data between one FD and other from within the kernel,
    # which is more efficient than read() + write().
    sendfile on;

    # Don't buffer data-sends (disable Nagle algorithm).
    # Good for sending frequent small bursts of data in real time.
    tcp_nodelay on;

    # Causes nginx to attempt to send its HTTP response head in one packet,
    # instead of using partial frames.
    #tcp_nopush on;

    # Enable gzipping of responses.
    gzip on;

    # Set the Vary HTTP header as defined in the RFC 2616.
    gzip_vary on;

    # Enable checking the existence of precompressed files.
    gzip_static on;


    # Specifies the main log format.
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
            '$status $body_bytes_sent "$http_referer" '
            '"$http_user_agent" "$http_x_forwarded_for"';

    # access_log [存储路径] [buff=大小] [gzip=压缩级别] [flush=time 刷新时间]
    access_log /var/log/nginx/access.log main buffer=64k flush=3s;

    # 每次日志写入时都会打开和关闭文件。但是，由于常用文件的描述符可以存储在缓存中，
    # 因此可以在 open_log_file_cache 指令 valid 的参数指定的时间内继续写入旧文件。
    # max 设置缓存中的最大文件描述符数量，如果缓存被占满，采用LRU算法将描述符关闭。
    # inactive 设置缓存描述符在这段时间内没有访问时关闭的时间;默认情况下，10 秒。
    # min_uses 设置 inactive 在参数定义的时间内使用文件的最小次数，以使描述符在缓存中保持打开状态;默认情况下，1。
    # valid 设置检查文件是否仍存在同名的时间;默认情况下，60 秒。
    # off：禁用缓存
    open_log_file_cache max=1000 inactive=10 min_uses=1 valid=60;


    # Includes virtual hosts configs.
    include /etc/nginx/conf.d/*.conf;
}

stream {
    log_format stream '$remote_addr - [$ssl_preread_server_name] [$time_local] ' 
        '$protocol $status $bytes_sent $bytes_received ' 
        '$session_time "$upstream_addr" ' 
        '"$upstream_bytes_sent" "$upstream_bytes_received " "$upstream_connect_time"';

    # access_log [存储路径] [buff=大小] [gzip=压缩级别] [flush=time 刷新时间]
    access_log /var/log/nginx/tcp-access.log stream buffer=64k flush=3s;

    # 每次日志写入时都会打开和关闭文件。但是，由于常用文件的描述符可以存储在缓存中，
    # 因此可以在 open_log_file_cache 指令 valid 的参数指定的时间内继续写入旧文件。
    # max 设置缓存中的最大文件描述符数量，如果缓存被占满，采用LRU算法将描述符关闭。
    # inactive 设置缓存描述符在这段时间内没有访问时关闭的时间;默认情况下，10 秒。
    # min_uses 设置 inactive 在参数定义的时间内使用文件的最小次数，以使描述符在缓存中保持打开状态;默认情况下，1。
    # valid 设置检查文件是否仍存在同名的时间;默认情况下，60 秒。
    # off：禁用缓存
    open_log_file_cache max=1000 inactive=10 min_uses=1 valid=60;

    # Includes virtual hosts configs.
    include /etc/nginx/conf.d/*.stream;
}